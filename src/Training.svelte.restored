<script lang="ts">
  // Handle back to dashboard
  export let handleBackToDashboard: () => void;
  
  // Navigation handlers
  export let handleHealthClick: () => void;
  export let handleTrainingClick: () => void;
  export let handleDevicesClick: () => void;
  export let handleProfileClick: () => void;
  export let handleSettingsClick: () => void;
  export let handleHistoryClick: (() => void) | null = null;
  export let handleAssessmentTrainingClick: (() => void) | null = null;
  
  // Добавим состояние для управления меню
  let isMenuOpen = false;
  let menuContainer: HTMLDivElement | null = null;
  
  // Функция для переключения состояния меню
  function toggleMenu() {
    isMenuOpen = !isMenuOpen;
    console.log('Menu toggled, isMenuOpen:', isMenuOpen);
    
    // После открытия меню регистрируем обработчик клика вне меню
    if (isMenuOpen) {
      // Небольшая задержка, чтобы избежать немедленного срабатывания
      setTimeout(() => {
        document.addEventListener('click', handleClickOutside);
      }, 10);
    } else {
      // При закрытии меню удаляем обработчик
      document.removeEventListener('click', handleClickOutside);
    }
  }
  
  // Функция для закрытия меню
  function closeMenu() {
    isMenuOpen = false;
    // Удаляем обработчик при закрытии меню
    document.removeEventListener('click', handleClickOutside);
  }
  
  // Функция для обработки клика вне меню
  function handleClickOutside(event: MouseEvent) {
    // Проверяем, что меню открыто и клик был вне меню
    if (isMenuOpen && menuContainer) {
      // Проверяем, что клик был вне контейнера меню
      if (!menuContainer.contains(event.target as Node)) {
        closeMenu();
        console.log('Clicked outside menu, closing menu');
      }
    }
  }
  
  // Speed tracking variables
  let currentSpeed = 0; // Current speed in km/h
  let averageSpeed = 0; // Average speed in km/h
  let maxSpeed = 0; // Maximum speed in km/h
  let totalDistance = 0; // Total distance in km
  let previousPosition: [number, number, number] | null = null; // [longitude, latitude, timestamp]
  
  // Mapbox integration
  import mapboxgl from 'mapbox-gl';
  import { onMount, onDestroy } from 'svelte';
  import Button from './Button.svelte'; // Импортируем универсальный компонент Button
  
  let mapContainer: HTMLElement | undefined;
  let map: mapboxgl.Map | undefined;
  let marker: mapboxgl.Marker | undefined;
  let geolocateControl: mapboxgl.GeolocateControl | undefined;
  let isLocating = false; // Флаг для отслеживания процесса определения местоположения
  let locationError = false; // Флаг для отслеживания ошибок геолокации
  let userLocation: [number, number] | null = null; // Для хранения координат пользователя
  let watchId: number | null = null; // ID для отслеживания геолокации
  let initialLocationSet = false; // Флаг для отслеживания установки начального местоположения
  
  // Ключ для хранения последней позиции в localStorage
  const LAST_POSITION_KEY = 'lastUserPosition';
  const POSITION_VALIDITY_DURATION = 24 * 60 * 60 * 1000; // 24 часа в миллисекундах
  
  // Функция для очистки сохраненной позиции (для отладки)
  function clearSavedPosition() {
    console.log('Clearing saved position from localStorage');
    localStorage.removeItem(LAST_POSITION_KEY);
  }
  
  // Функция для получения последней сохраненной позиции
  function getLastSavedPosition(): {lng: number, lat: number, timestamp: number} | null {
    try {
      const savedPosition = localStorage.getItem(LAST_POSITION_KEY);
      console.log('Raw saved position from localStorage:', savedPosition);
      if (savedPosition) {
        const position = JSON.parse(savedPosition);
        console.log('Parsed saved position:', position);
        return position;
      }
    } catch (error) {
      console.error('Error reading last position from localStorage:', error);
    }
    return null;
  }
  
  // Функция для сохранения текущей позиции пользователя
  function saveCurrentPosition(lng: number, lat: number) {
    try {
      const position = { 
        lng, 
        lat, 
        timestamp: Date.now(),
        // Добавим дополнительные данные для отладки
        savedAt: new Date().toISOString()
      };
      localStorage.setItem(LAST_POSITION_KEY, JSON.stringify(position));
      console.log('Position saved to localStorage:', position);
      
      // Дополнительно проверим, что данные действительно сохранились
      const saved = localStorage.getItem(LAST_POSITION_KEY);
      console.log('Verification - data actually saved:', saved);
      
      // Проверим, можно ли прочитать сохраненные данные
      if (saved) {
        try {
          const parsed = JSON.parse(saved);
          console.log('Verification - parsed saved data:', parsed);
        } catch (e) {
          console.error('Verification - error parsing saved data:', e);
        }
      }
    } catch (error) {
      console.error('Error saving position to localStorage:', error);
    }
  }
  
  // Функция для проверки, является ли сохраненная позиция актуальной
  function isSavedPositionValid(savedPosition: {lng: number, lat: number, timestamp: number} | null): boolean {
    if (!savedPosition || !savedPosition.timestamp) {
      console.log('No saved position or timestamp');
      return false;
    }
    
    const now = Date.now();
    const positionAge = now - savedPosition.timestamp;
    
    console.log(`Position age: ${positionAge}ms, validity duration: ${POSITION_VALIDITY_DURATION}ms`);
    
    const isValid = positionAge < POSITION_VALIDITY_DURATION;
    console.log('Is saved position valid:', isValid);
    
    return isValid;
  }
  
  // Функция для получения последней сохраненной позиции с проверкой актуальности
  function getLastValidPosition(): {lng: number, lat: number} | null {
    try {
      const savedPosition = getLastSavedPosition();
      if (savedPosition) {
        console.log('Found saved position, checking validity...');
        if (isSavedPositionValid(savedPosition)) {
          console.log('Using valid saved position:', savedPosition);
          return { lng: savedPosition.lng, lat: savedPosition.lat };
        } else {
          console.log('Saved position is outdated, removing it');
          // Удаляем устаревшую позицию
          localStorage.removeItem(LAST_POSITION_KEY);
        }
      } else {
        console.log('No saved position found');
      }
    } catch (error) {
      console.error('Error reading last position from localStorage:', error);
      // В случае ошибки удаляем поврежденные данные
      localStorage.removeItem(LAST_POSITION_KEY);
    }
    console.log('No valid saved position found, will use default');
    return null;
  }
  
  // Функция для расчета скорости между двумя точками
  function calculateSpeed(lat1: number, lon1: number, time1: number, lat2: number, lon2: number, time2: number): number {
    // Calculate distance in meters
    const distance = calculateDistance(lat1, lon1, lat2, lon2);
    
    // Calculate time difference in hours
    const timeDiffHours = (time2 - time1) / (1000 * 60 * 60);
    
    // Avoid division by zero
    if (timeDiffHours <= 0) return 0;
    
    // Calculate speed in km/h
    return (distance / 1000) / timeDiffHours;
  }
  
  // Функция для обновления статистики на основе новой позиции
  function updateTrainingStats(position: GeolocationPosition) {
    console.log('Updating training stats with position:', position);
    const now = new Date();
    const currentTime = now.getTime();
    
    // If we have a previous position, calculate distance and speed
    if (previousPosition && position.coords) {
      const [prevLng, prevLat, prevTime] = previousPosition;
      const currentLng = position.coords.longitude;
      const currentLat = position.coords.latitude;
      
      // Calculate distance between points in meters
      const distance = calculateDistance(prevLat, prevLng, currentLat, currentLng);
      
      // Convert to kilometers and add to total distance
      totalDistance += distance / 1000;
      
      // Calculate current speed in km/h
      currentSpeed = calculateSpeed(prevLat, prevLng, prevTime, currentLat, currentLng, currentTime);
      
      // Update maximum speed if current speed is higher
      if (currentSpeed > maxSpeed) {
        maxSpeed = currentSpeed;
      }
      
      // Calculate average speed
      const totalTrainingTimeHours = (currentTime - previousPosition[2]) / (1000 * 60 * 60);
      if (totalTrainingTimeHours > 0) {
        averageSpeed = totalDistance / totalTrainingTimeHours;
      }
    }
    
    // Store current position for next calculation
    if (position.coords) {
      previousPosition = [position.coords.longitude, position.coords.latitude, currentTime];
      
      // Также сохраняем позицию в localStorage
      saveCurrentPosition(position.coords.longitude, position.coords.latitude);
    }
  }
  
  function initializeMap() {
    try {
      // Initialize Mapbox map
      mapboxgl.accessToken = 'pk.eyJ1Ijoia29tbXVuMTV0IiwiYSI6ImNtZmk1ZzlsNTBoejAybHF3ejR6bjEwZ3oifQ.GHO6tJYDnc03P7fxUshk8A';
      
      if (!mapContainer) {
        console.error('Map container not found');
        return;
      }
      
      // Получаем последнюю сохраненную позицию пользователя
      console.log('Getting last valid position...');
      const lastPosition = getLastValidPosition();
      
      // Инициализируем карту с последними сохраненными координатами или координатами по умолчанию
      const initialLng = lastPosition ? lastPosition.lng : 30.3158;
      const initialLat = lastPosition ? lastPosition.lat : 59.9343;
      
      console.log('Initializing map with coordinates:', initialLng, initialLat, 'Last position was:', lastPosition);
      
      // Дополнительно проверим, что координаты действительно взяты из сохраненных данных
      if (lastPosition) {
        console.log('CONFIRMATION: Using saved coordinates - Lng:', initialLng, 'Lat:', initialLat);
      } else {
        console.log('CONFIRMATION: Using default coordinates - Lng:', initialLng, 'Lat:', initialLat);
      }
      
      map = new mapboxgl.Map({
        container: mapContainer,
        style: 'mapbox://styles/mapbox/streets-v12',
        center: [initialLng, initialLat],
        zoom: 17, // Очень крупный zoom для тренировки
        maxZoom: 23, // Увеличен максимальный zoom до 23 уровня
        minZoom: 10, // Разрешаем отдаление для просмотра всего пути
        pitch: 0, // Устанавливаем нулевой угол наклона камеры
        bearing: 0 // Устанавливаем нулевой поворот камеры
      });
      
      // Add navigation controls
      if (map) {
        map.addControl(new mapboxgl.NavigationControl(), 'top-right');
      }
      
      // Add geolocate control
      if (map) {
        geolocateControl = new mapboxgl.GeolocateControl({
          positionOptions: {
            enableHighAccuracy: true
          },
          trackUserLocation: true,
          showUserHeading: true
        });
        
        map.addControl(geolocateControl);
        
        // Listen for geolocation events
        geolocateControl.on('geolocate', (position) => {
          console.log('User location found via geolocate event:', position);
          locationError = false;
          isLocating = false;
          
          // Update training stats
          updateTrainingStats(position);
          
          // Update current position with user location
          if (position && position.coords && map) {
            userLocation = [position.coords.longitude, position.coords.latitude];
            
            // Сохраняем текущую позицию пользователя
            saveCurrentPosition(position.coords.longitude, position.coords.latitude);
            
            // Update marker position or create new marker
            if (marker) {
              marker.setLngLat([position.coords.longitude, position.coords.latitude]);
            } else {
              // Создаем маркер в форме бегуна
              const el = document.createElement('div');
              el.className = 'runner-marker';
              marker = new mapboxgl.Marker({ element: el })
                .setLngLat([position.coords.longitude, position.coords.latitude])
                .addTo(map!); // Используем оператор ! для утверждения, что map не undefined
            }
            
            // Центрируем карту на пользователе с плавной анимацией только если это первое определение местоположения
            if (!initialLocationSet) {
              console.log('Setting initial map center');
              map.setCenter([position.coords.longitude, position.coords.latitude]);
              initialLocationSet = true;
            } else {
              // Для последующих обновлений используем плавную анимацию
              console.log('Animating map to new position');
              map.easeTo({
                center: [position.coords.longitude, position.coords.latitude],
                zoom: 17,
                duration: 1000 // Плавная анимация 1 секунда
              });
            }
          }
        });
        
        geolocateControl.on('error', (error) => {
          console.error('Geolocation error:', error);
          locationError = true;
          isLocating = false;
          
          // Если геолокация не удалась, начинаем отслеживание местоположения вручную
          if (map) {
            startLocationTracking();
          }
        });
        
        // Trigger geolocation when map loads
        if (map) {
          map.on('load', () => {
            if (map) {
              console.log('Map loaded, current center:', map.getCenter());
              console.log('Map loaded, triggering geolocation');
              // Add a small delay to ensure the map is fully loaded
              setTimeout(() => {
                // Автоматически запрашиваем геолокацию при загрузке карты
                if (geolocateControl) {
                  isLocating = true;
                  // @ts-ignore
                  geolocateControl.trigger();
                }
              }, 500);
            }
          });
          
          // Дополнительно проверяем позицию при каждом обновлении карты
          map.on('moveend', () => {
            if (userLocation && map) {
              const center = map.getCenter();
              // Проверяем, если центр карты изменился, сохраняем новую позицию
              if (Math.abs(center.lng - userLocation[0]) > 0.0001 || Math.abs(center.lat - userLocation[1]) > 0.0001) {
                console.log('Map moved, saving new position:', center.lng, center.lat);
                saveCurrentPosition(center.lng, center.lat);
                userLocation = [center.lng, center.lat];
              }
            }
          });
        }
      }
    } catch (error) {
      console.error('Error initializing Mapbox map:', error);
    }
  }
  
  // Функция для отслеживания местоположения в реальном времени
  function startLocationTracking() {
    if (!('geolocation' in navigator)) {
      console.error('Geolocation is not supported by this browser');
      return;
    }
    
    console.log('Starting manual location tracking');
    
    // Начинаем отслеживание местоположения с высокой точностью
    watchId = navigator.geolocation.watchPosition(
      (position) => {
        console.log('Manual location tracking update:', position);
        if (map && position.coords) {
          const lng = position.coords.longitude;
          const lat = position.coords.latitude;
          const currentPosition: [number, number] = [lng, lat];
          
          // Update training stats
          updateTrainingStats(position);
          
          // Сохраняем текущую позицию пользователя
          saveCurrentPosition(lng, lat);
          
          // Обновляем позицию маркера
          if (marker) {
            marker.setLngLat(currentPosition);
          } else {
            // Создаем маркер в форме бегуна
            const el = document.createElement('div');
            el.className = 'runner-marker';
            marker = new mapboxgl.Marker({ element: el })
              .setLngLat(currentPosition)
              .addTo(map);
          }
          
          // Плавно центрируем карту на пользователе, если расстояние достаточно большое
          if (previousPosition) {
            const distance = calculateDistance(
              previousPosition[1], previousPosition[0],
              lat, lng
            );
            
            // Если пользователь переместился более чем на 5 метров, обновляем карту
            if (distance > 5) {
              console.log('User moved significantly, updating map position');
              map.easeTo({
                center: currentPosition,
                zoom: 17,
                duration: 1000 // Плавная анимация 1 секунда
              });
              // Update previous position
              previousPosition = [lng, lat, Date.now()];
            }
          } else {
            // Первоначальное центрирование
            console.log('Initial map centering in manual tracking');
            map.setCenter(currentPosition);
            initialLocationSet = true;
            previousPosition = [lng, lat, Date.now()];
          }
          
          // Сохраняем текущее местоположение
          userLocation = currentPosition;
          
          console.log('Position updated via manual tracking:', lng, lat);
        }
      },
      (error) => {
        console.error('Error watching position:', error);
        locationError = true;
      },
      {
        enableHighAccuracy: true,
        maximumAge: 3000, // Используем кэшированное местоположение до 3 секунд
        timeout: 8000 // Таймаут 8 секунд
      }
    );
  }
  
  // Вспомогательная функция для расчета расстояния между двумя точками (в метрах)
  function calculateDistance(lat1: number, lon1: number, lat2: number, lon2: number): number {
    const R = 6371e3; // Радиус Земли в метрах
    const phi1 = lat1 * Math.PI/180;
    const phi2 = lat2 * Math.PI/180;
    const deltaPhi = (lat2-lat1) * Math.PI/180;
    const deltaLambda = (lon2-lon1) * Math.PI/180;
    
    const a = Math.sin(deltaPhi/2) * Math.sin(deltaPhi/2) +
              Math.cos(phi1) * Math.cos(phi2) *
              Math.sin(deltaLambda/2) * Math.sin(deltaLambda/2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
    
    return R * c;
  }
  
  // Функция для повторного запроса геолокации в случае ошибки
  function retryGeolocation() {
    locationError = false;
    if (geolocateControl) {
      isLocating = true;
      // @ts-ignore
      geolocateControl.trigger();
    }
  }
  
  onMount(() => {
    try {
      console.log('Training component mounted');
      
      // Проверим сохраненную позицию до инициализации карты
      console.log('Checking for saved position before map initialization...');
      const savedPosition = getLastValidPosition();
      console.log('Saved position before map init:', savedPosition);
      
      // Проверим содержимое localStorage напрямую
      try {
        const rawPosition = localStorage.getItem(LAST_POSITION_KEY);
        console.log('Raw position from localStorage:', rawPosition);
      } catch (e) {
        console.error('Error reading raw position from localStorage:', e);
      }
      
      // Initialize the map
      initializeMap();
    } catch (error) {
      console.error('Error initializing Mapbox map:', error);
    }
  });
  
  onDestroy(() => {
    console.log('Training component destroying');
    if (watchId !== null) {
      navigator.geolocation.clearWatch(watchId);
    }
    
    // Сохраняем последнюю позицию перед уничтожением компонента
    if (map && userLocation) {
      const center = map.getCenter();
      console.log('Saving final position before destroy:', center.lng, center.lat);
      saveCurrentPosition(center.lng, center.lat);
    }
    
    // Удалим обработчик кликов
    document.removeEventListener('click', handleClickOutside);
  });
  
  // Helper function to format distance
  function formatDistance(distance: number): string {
    return distance.toFixed(2);
  }
  
  // Helper function to format speed
  function formatSpeed(speed: number): string {
    return speed.toFixed(2);
  }
</script>

<div class="background-animation">
  <!-- 20 sports items -->
  <div class="sports-item football"></div>
  <div class="sports-item basketball"></div>
  <div class="sports-item sneakers"></div>
  <div class="sports-item shorts"></div>
  <div class="sports-item tshirt"></div>
  <div class="sports-item football"></div>
  <div class="sports-item basketball"></div>
  <div class="sports-item sneakers"></div>
  <div class="sports-item shorts"></div>
  <div class="sports-item tshirt"></div>
  <div class="sports-item football"></div>
  <div class="sports-item basketball"></div>
  <div class="sports-item sneakers"></div>
  <div class="sports-item shorts"></div>
  <div class="sports-item tshirt"></div>
  <div class="sports-item football"></div>
  <div class="sports-item basketball"></div>
  <div class="sports-item sneakers"></div>
  <div class="sports-item shorts"></div>
  <div class="sports-item tshirt"></div>
</div>

<div class="app-container">
  <div class="glass-panel">
    <!-- Header with left panel button -->
    <div class="dashboard-header-container">
      <div class="dashboard-header">
        <h1 class="dashboard-title">Тренировка</h1>
        <!-- Добавим кнопку меню в правую часть заголовка -->
        <div class="header-icon menu-button" on:click={toggleMenu} role="button" tabindex="0" aria-label="Меню">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M12 13C12.5523 13 13 12.5523 13 12C13 11.4477 12.5523 11 12 11C11.4477 11 11 11.4477 11 12C11 12.5523 11.4477 13 12 13Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            <path d="M12 6C12.5523 6 13 5.55228 13 5C13 4.44772 12.5523 4 12 4C11.4477 4 11 4.44772 11 5C11 5.55228 11.4477 6 12 6Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            <path d="M12 20C12.5523 20 13 19.5523 13 19C13 18.4477 12.5523 18 12 18C11.4477 18 11 18.4477 11 19C11 19.5523 11.4477 20 12 20Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
        </div>
      </div>
    </div>
    
    <!-- Выдвижное меню -->
    {#if isMenuOpen}
      <div class="menu-overlay" on:click={closeMenu}>
        <div class="menu-container" bind:this={menuContainer} on:click|stopPropagation={() => {}}>
          <div class="menu-header">
            <h3>Функции</h3>
            <button class="menu-close" on:click={closeMenu} aria-label="Закрыть меню">
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M18 6L6 18" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                <path d="M6 6L18 18" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
            </button>
          </div>
          <div class="menu-items">
            <div class="menu-item" on:click={() => { if (handleHistoryClick) { closeMenu(); handleHistoryClick(); } }}>
              <span>История тренировок</span>
            </div>
            <div class="menu-item" on:click={() => { if (handleAssessmentTrainingClick) { closeMenu(); handleAssessmentTrainingClick(); } }}>
              <span>Оценочная тренировка</span>
            </div>
          </div>
        </div>
      </div>
    {/if}
    
    <!-- Training content -->
    <div class="dashboard-main">
      <!-- Container for map and training stats to eliminate gap -->
      <div class="map-stats-container">
        <!-- Map container -->
        <div class="shield-content" bind:this={mapContainer}>
          <!-- Отображаем сообщение о поиске местоположения -->
          {#if isLocating}
            <div class="location-message">
              <p>Поиск вашего местоположения...</p>
              <div class="spinner"></div>
            </div>
          {/if}
          
          <!-- Отображаем сообщение об ошибке геолокации -->
          {#if locationError}
            <div class="location-error">
              <p>Не удалось определить местоположение. Используются координаты по умолчанию.</p>
            </div>
          {/if}
          
          <!-- Map will be initialized here by Mapbox GL JS -->
        </div>
        
        <!-- Training stats panel positioned below the map -->
        <div class="training-stats s-nHmVefn3S3wX">
          <div class="stat-card s-nHmVefn3S3wX">
            <h4 class="s-nHmVefn3S3wX">Время</h4>
            <p class="stat-value s-nHmVefn3S3wX">00:00:00</p>
          </div>
          <div class="stat-card s-nHmVefn3S3wX">
            <h4 class="s-nHmVefn3S3wX">Дистанция</h4>
            <p class="stat-value s-nHmVefn3S3wX">{formatDistance(totalDistance)} к